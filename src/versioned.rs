// AUTOGENERATED FROM template/versioned.rs.template; DO NOT EDIT DIRECTLY

use std::fmt::Debug;

use anyhow::bail;
use trustfall::Schema;

macro_rules! add_version_method {
    () => {
        pub fn version(&self) -> u32 {
            match self {
                #[cfg(feature = "v45")]
                Self::V45(..) => 45,

                #[cfg(feature = "v53")]
                Self::V53(..) => 53,

                #[cfg(feature = "v55")]
                Self::V55(..) => 55,

                #[cfg(feature = "v56")]
                Self::V56(..) => 56,
            }
        }
    };
}

#[non_exhaustive]
#[derive(Debug)]
pub enum VersionedStorage {
    #[cfg(feature = "v45")]
    V45(trustfall_rustdoc_adapter_v45::PackageStorage),

    #[cfg(feature = "v53")]
    V53(trustfall_rustdoc_adapter_v53::PackageStorage),

    #[cfg(feature = "v55")]
    V55(trustfall_rustdoc_adapter_v55::PackageStorage),

    #[cfg(feature = "v56")]
    V56(trustfall_rustdoc_adapter_v56::PackageStorage),
}

#[non_exhaustive]
#[derive(Debug)]
pub enum VersionedIndex<'a> {
    #[cfg(feature = "v45")]
    V45(trustfall_rustdoc_adapter_v45::PackageIndex<'a>),

    #[cfg(feature = "v53")]
    V53(trustfall_rustdoc_adapter_v53::PackageIndex<'a>),

    #[cfg(feature = "v55")]
    V55(trustfall_rustdoc_adapter_v55::PackageIndex<'a>),

    #[cfg(feature = "v56")]
    V56(trustfall_rustdoc_adapter_v56::PackageIndex<'a>),
}

#[non_exhaustive]
pub enum VersionedRustdocAdapter<'a> {
    #[cfg(feature = "v45")]
    V45(
        &'static Schema,
        trustfall_rustdoc_adapter_v45::RustdocAdapter<'a>,
    ),

    #[cfg(feature = "v53")]
    V53(
        &'static Schema,
        trustfall_rustdoc_adapter_v53::RustdocAdapter<'a>,
    ),

    #[cfg(feature = "v55")]
    V55(
        &'static Schema,
        trustfall_rustdoc_adapter_v55::RustdocAdapter<'a>,
    ),

    #[cfg(feature = "v56")]
    V56(
        &'static Schema,
        trustfall_rustdoc_adapter_v56::RustdocAdapter<'a>,
    ),
}

impl VersionedStorage {
    /// The version of the crate held here, as reported by its rustdoc data.
    ///
    /// This is the version listed in the `Cargo.toml` of the crate, not its rustdoc format version.
    pub fn crate_version(&self) -> Option<&str> {
        match self {
            #[cfg(feature = "v45")]
            VersionedStorage::V45(s) => s.crate_version(),

            #[cfg(feature = "v53")]
            VersionedStorage::V53(s) => s.crate_version(),

            #[cfg(feature = "v55")]
            VersionedStorage::V55(s) => s.crate_version(),

            #[cfg(feature = "v56")]
            VersionedStorage::V56(s) => s.crate_version(),
        }
    }

    add_version_method!();
}

impl<'a> VersionedIndex<'a> {
    pub fn from_storage(storage: &'a VersionedStorage) -> Self {
        match storage {
            #[cfg(feature = "v45")]
            VersionedStorage::V45(s) => {
                Self::V45(trustfall_rustdoc_adapter_v45::PackageIndex::from_storage(s))
            }

            #[cfg(feature = "v53")]
            VersionedStorage::V53(s) => {
                Self::V53(trustfall_rustdoc_adapter_v53::PackageIndex::from_storage(s))
            }

            #[cfg(feature = "v55")]
            VersionedStorage::V55(s) => {
                Self::V55(trustfall_rustdoc_adapter_v55::PackageIndex::from_storage(s))
            }

            #[cfg(feature = "v56")]
            VersionedStorage::V56(s) => {
                Self::V56(trustfall_rustdoc_adapter_v56::PackageIndex::from_storage(s))
            }
        }
    }

    add_version_method!();
}

impl<'a> VersionedRustdocAdapter<'a> {
    pub fn new(
        current: &'a VersionedIndex<'a>,
        baseline: Option<&'a VersionedIndex<'a>>,
    ) -> anyhow::Result<Self> {
        match (current, baseline) {
            #[cfg(feature = "v45")]
            (VersionedIndex::V45(c), Some(VersionedIndex::V45(b))) => {
                let adapter = trustfall_rustdoc_adapter_v45::RustdocAdapter::new(c, Some(b));
                Ok(VersionedRustdocAdapter::V45(
                    trustfall_rustdoc_adapter_v45::RustdocAdapter::schema(),
                    adapter,
                ))
            }

            #[cfg(feature = "v45")]
            (VersionedIndex::V45(c), None) => {
                let adapter = trustfall_rustdoc_adapter_v45::RustdocAdapter::new(c, None);
                Ok(VersionedRustdocAdapter::V45(
                    trustfall_rustdoc_adapter_v45::RustdocAdapter::schema(),
                    adapter,
                ))
            }

            #[cfg(feature = "v53")]
            (VersionedIndex::V53(c), Some(VersionedIndex::V53(b))) => {
                let adapter = trustfall_rustdoc_adapter_v53::RustdocAdapter::new(c, Some(b));
                Ok(VersionedRustdocAdapter::V53(
                    trustfall_rustdoc_adapter_v53::RustdocAdapter::schema(),
                    adapter,
                ))
            }

            #[cfg(feature = "v53")]
            (VersionedIndex::V53(c), None) => {
                let adapter = trustfall_rustdoc_adapter_v53::RustdocAdapter::new(c, None);
                Ok(VersionedRustdocAdapter::V53(
                    trustfall_rustdoc_adapter_v53::RustdocAdapter::schema(),
                    adapter,
                ))
            }

            #[cfg(feature = "v55")]
            (VersionedIndex::V55(c), Some(VersionedIndex::V55(b))) => {
                let adapter = trustfall_rustdoc_adapter_v55::RustdocAdapter::new(c, Some(b));
                Ok(VersionedRustdocAdapter::V55(
                    trustfall_rustdoc_adapter_v55::RustdocAdapter::schema(),
                    adapter,
                ))
            }

            #[cfg(feature = "v55")]
            (VersionedIndex::V55(c), None) => {
                let adapter = trustfall_rustdoc_adapter_v55::RustdocAdapter::new(c, None);
                Ok(VersionedRustdocAdapter::V55(
                    trustfall_rustdoc_adapter_v55::RustdocAdapter::schema(),
                    adapter,
                ))
            }

            #[cfg(feature = "v56")]
            (VersionedIndex::V56(c), Some(VersionedIndex::V56(b))) => {
                let adapter = trustfall_rustdoc_adapter_v56::RustdocAdapter::new(c, Some(b));
                Ok(VersionedRustdocAdapter::V56(
                    trustfall_rustdoc_adapter_v56::RustdocAdapter::schema(),
                    adapter,
                ))
            }

            #[cfg(feature = "v56")]
            (VersionedIndex::V56(c), None) => {
                let adapter = trustfall_rustdoc_adapter_v56::RustdocAdapter::new(c, None);
                Ok(VersionedRustdocAdapter::V56(
                    trustfall_rustdoc_adapter_v56::RustdocAdapter::schema(),
                    adapter,
                ))
            }

            #[allow(unreachable_patterns)]
            (c, Some(b)) => {
                bail!(
                    "version mismatch between current (v{}) and baseline (v{}) format versions",
                    c.version(),
                    b.version()
                )
            }
        }
    }

    pub fn schema(&self) -> &Schema {
        match self {
            #[cfg(feature = "v45")]
            VersionedRustdocAdapter::V45(schema, ..) => schema,

            #[cfg(feature = "v53")]
            VersionedRustdocAdapter::V53(schema, ..) => schema,

            #[cfg(feature = "v55")]
            VersionedRustdocAdapter::V55(schema, ..) => schema,

            #[cfg(feature = "v56")]
            VersionedRustdocAdapter::V56(schema, ..) => schema,
        }
    }

    add_version_method!();
}

pub(crate) fn supported_versions() -> &'static [u32] {
    &[
        #[cfg(feature = "v45")]
        45,
        #[cfg(feature = "v53")]
        53,
        #[cfg(feature = "v55")]
        55,
        #[cfg(feature = "v56")]
        56,
    ]
}
